import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from decimal import Decimal, InvalidOperation
from cachetools import TTLCache
import aiohttp
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "8198907146:AAHyB4w-HhVNQsed9PxHSNLFSZHximUj_0U"
API_BASE = "https://v6.exchangerate-api.com/v6/075da83e108bde274389c814/latest/"
CACHE_TTL = 300  # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç

# –ö–µ—à –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
rates_cache = TTLCache(maxsize=100, ttl=CACHE_TTL)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CurrencyStates(StatesGroup):
    GET_AMOUNT = State()


# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
EXCHANGE_DIRECTIONS = {
    'USD_RUB': 'üá∫üá∏ USD ‚Üí RUB üá∑üá∫',
    'RUB_USD': 'üá∑üá∫ RUB ‚Üí USD üá∫üá∏',
    'EUR_RUB': 'üá™üá∫ EUR ‚Üí RUB üá∑üá∫',
    'USD_EUR': 'üá∫üá∏ USD ‚Üí EUR üá™üá∫',
    'EUR_USD': 'üá™üá∫ EUR ‚Üí USD üá∫üá∏',
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


async def get_exchange_rate(base: str, target: str) -> Decimal | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"{base}_{target}"
    if cache_key in rates_cache:
        return rates_cache[cache_key]

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE}{base}", timeout=10) as response:
                data = await response.json()

                if data.get('result') == 'success':
                    rate = Decimal(str(data['conversion_rates'][target]))
                    rates_cache[cache_key] = rate
                    return rate
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
    return None


async def convert_currency(amount: Decimal, direction: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã"""
    base, target = direction.split("_")
    rate = await get_exchange_rate(base, target)

    if rate is None:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    result = (amount * rate).quantize(Decimal('0.01'))
    return (f"üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç: {amount} {base} ‚âà {result} {target}\n"
            f"üî∏ –ö—É—Ä—Å: 1 {base} = {rate} {target}\n"
            f"‚è≥ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ {CACHE_TTL // 60} –º–∏–Ω—É—Ç")


def get_exchange_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    buttons = [
        [KeyboardButton(text=name)]
        for name in EXCHANGE_DIRECTIONS.values()
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=get_exchange_keyboard()
    )


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ========== #

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await show_main_menu(message)


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üí∞ *–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç*\n\n"
        "‚úÖ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚úÖ /help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã!"
    )
    await message.answer(help_text, parse_mode='Markdown')


@dp.message(F.text.in_(EXCHANGE_DIRECTIONS.values()))
async def direction_selected(message: types.Message, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    direction_code = next(k for k, v in EXCHANGE_DIRECTIONS.items() if v == message.text)
    await state.update_data(direction=direction_code)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CurrencyStates.GET_AMOUNT)


@dp.message(CurrencyStates.GET_AMOUNT)
async def amount_entered(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    try:
        amount = Decimal(message.text.replace(',', '.').strip())
        if amount <= 0:
            raise ValueError
    except (ValueError, InvalidOperation):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 150.50)")
        return

    data = await state.get_data()
    try:
        result = await convert_currency(amount, data['direction'])
        await message.answer(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    await show_main_menu(message)


@dp.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ –º–µ–Ω—é!")
    await show_main_menu(message)


# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ========== #

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())